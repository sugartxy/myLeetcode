\**
*Say you have an array for which the ith element is the price of a given stock on day i.
*Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*\
\**
*idea:https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/solution/
*卡住的点，重复值。只考虑了尖点的peak valley， 没有考虑平台式的peak and valley. 应该使用while来过滤掉所有重复值。
*\
class Solution {
    public int maxProfit(int[] prices) {
        int size = prices.length;
        if(prices == null || size==0 || size ==1) return 0;
        int profit = 0;
        int valley=prices[0];
        int peak = prices[0];

        for (int i =0; i<size-1; i++){
            while(i<size-1 && prices[i]>=prices[i+1]) i++;
            valley = prices[i];
            while(i<size -1 && prices[i]<= prices[i+1]) i++;
            peak = prices[i];
            profit += peak - valley;
        }
        return profit;
    }
}
